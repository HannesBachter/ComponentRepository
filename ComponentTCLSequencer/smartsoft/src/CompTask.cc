//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 2.0 (alpha-1)
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 	1997-2000 Christian Schlegel
// 					2009-2011 Andreas Steck
//
//      steck@hs-ulm.de
//		schlegel@hs-ulm.de
//
//      ZAFH Servicerobotic Ulm
//      Christian Schlegel
//      University of Applied Sciences
//      Prittwitzstr. 10
//      89075 Ulm
//      Germany
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#include "CompTask.hh"
#include "ComponentTCLSequencer.hh"

#include <iostream>

CompTask::CompTask(): SmartACE::Task()
{
	std::cout << "constructor CompTask\n";
}

CompTask::~CompTask() 
{
	std::cout << "destructor CompTask\n";
}

int CompTask::task_execution()
{

	// coponent will now start running and will continue (block in the run method) until it is commanded to shutdown (i.e. by a SIGINT signal)
	COMP->run();

	std::cout<<__FUNCTION__<<" COMPONENT SHUTDOWN"<<std::endl;

	char eventResult[LISP_STRING];
	sprintf(eventResult,"((component shutdownEvent %d) %s)",0, "(shutdown)");
	COMP->eventInterface->append(eventResult);

	ACE_OS::sleep(ACE_Time_Value(1,0));

	// destroy all task instances

	// now clean-up all communication ports
	// delete all client ports
	//TODO clean up ports ...
	//e.g. old: delete COMP->purePursuitEventClient;

	// delete all ThreadQueueHandler
	// delete all other handlers

	COMP->fini();

	// finally delete the component itself
	ComponentTCLSequencer::deleteInstance();

	std::cout<<"EXIT on_entry COMP task - "<<ACE_OS::gettimeofday()<<std::endl;

	return 0;
}
