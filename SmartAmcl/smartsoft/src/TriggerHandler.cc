//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "TriggerHandler.hh"

#include "SmartAmcl.hh"

// trigger user methods
void TriggerHandler::handleCommNavigationObjects_AmclParameter_INITIALPOSE(const int &x, const int &y, const double &a)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	SmartACE::SmartRecursiveGuard pfGuard(COMP->PFMutex);
	{
		if(COMP->amcl_init == true){

		std::cout<<"INITIAL POSE: "<<x<<" "<<y<<" "<<a<<std::endl;

		// Re-Initialize the filter
		pf_vector_t pf_init_pose_mean = pf_vector_zero();
		pf_init_pose_mean.v[0] = x/1000.0;
		pf_init_pose_mean.v[1] = y/1000.0;
		pf_init_pose_mean.v[2] = a;
		pf_matrix_t pf_init_pose_cov = pf_matrix_zero();
		pf_init_pose_cov.m[0][0] = COMP->getGlobalState().getGeneral().getInitial_cov_xx();
		pf_init_pose_cov.m[1][1] = COMP->getGlobalState().getGeneral().getInitial_cov_yy();
		pf_init_pose_cov.m[2][2] = COMP->getGlobalState().getGeneral().getInitial_cov_aa();

		pf_init(COMP->pf_, pf_init_pose_mean, pf_init_pose_cov);

		//pf_init_model(pf_, (pf_init_model_fn_t) AmclTask::uniformPoseGenerator, (void *) map_);
		COMP->pf_init_ = false;
		} else {
			std::cout <<"[TriggerHandler]: INITIAL_POSE called while amcl is not initialized --> skip!"<<std::endl;
		}

	}
	pfGuard.release();
}
void TriggerHandler::handleCommNavigationObjects_AmclParameter_GLOBALLOCALIZATION()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	std::cout <<"GLOBALLOCALIZATION: triggered\n";
	SmartACE::SmartRecursiveGuard pfGuard(COMP->PFMutex);
	{
		if(COMP->amcl_init == true){
			pf_init_model(COMP->pf_,(pf_init_model_fn_t) SmartAmclCore::uniformPoseGenerator, (void *) COMP->map_);
			COMP->pf_init_ = false;
		} else {
			std::cout <<"[TriggerHandler]: INITIAL_POSE called while amcl is not initialized --> skip!"<<std::endl;
		}
	}
	pfGuard.release();
}
void TriggerHandler::handleCommNavigationObjects_AmclParameter_LOADMAP(const std::string &filename)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	std::cout <<"[TriggerHandler]LOADMAP: file:"<<filename<<std::endl;
	Smart::StatusCode status;
	status = COMP->stateSlave->tryAcquire("nonneutral");
	if(status != Smart::SMART_OK){

		// load yaml file
		std::string fname = filename;
		std::ifstream fin(fname.c_str());
		if (fin.fail()) {
			std::cerr << "[TriggerHandler] ERROR: Could not open " << fname << ", continue with old map!\n";
		} else {
			SmartACE::SmartRecursiveGuard pfGuard(COMP->PFMutex);
			{
				if(COMP->amcl_init == true){
					std::cout<<"[TriggerHandler]: Destroy map, filter, laser and odom ..."<<std::endl;
					map_free(COMP->map_);
					pf_free(COMP->pf_);
					delete COMP->laser_;
					delete COMP->odom_;
					COMP->amcl_init = false;
					std::cout<<"[TriggerHandler]: ... DONE"<<std::endl;
				} else {
					std::cout<<"[TriggerHandler]: Filter not initialized, skip destruction!"<<std::endl;
				}

				if(COMP->amclTask->init(filename)!=0){
					//TODO this should not happen, if this happens the component should maybe better restore the old state!
					std::cout<<"[TriggerHandler]: ERROR LOADING MAP! --> exit(-1)"<<std::endl;
					exit(-1);
				}


				if(COMP->getGlobalState().getGeneral().getEnable_visualization() == true){
					COMP->h.clear();
					COMP->h.displayMap(COMP->map_);
					COMP->h.initObjects();
				}
			}
			pfGuard.release();
		}

	} else
	{
		std::cout<<"[WARNING]: Componente is active --> LOADMAP not allowed!"<<std::endl;
		COMP->stateSlave->release("nonneutral");
	}
	std::cout<<"[TriggerHandler] LOADMAP DONE"<<std::endl;
}
