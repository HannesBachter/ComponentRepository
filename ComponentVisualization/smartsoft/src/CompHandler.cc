//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Manuel Wopfner
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "CompHandler.hh"
#include "ComponentVisualization.hh"

#include <iostream>

// include communication objects
#include <CommBasicObjects/CommVoid.hh>
//#include <CommPersonDetectionObjects/CommPersonDetectionEventResult.hh>
//#include <CommPersonDetectionObjects/CommPersonId.hh>
#include <CommBasicObjects/CommBaseState.hh>
#include <CommNavigationObjects/CommGridMap.hh>
//#include <CommPersonDetectionObjects/CommDetectedPerson.hh>
#include <CommBasicObjects/CommMobileLaserScan.hh>
#include <CommNavigationObjects/CommGridMapRequest.hh>


void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

		Smart::StatusCode status;

		// Start all services. If you need manual control, use the content of this function to
		// connect and start each service individually, e.g:
		// COMP->connectMyPortName("SmartExampleComponent", "examplePort");

		//status = COMP->connectAndStartAllServices();
		// CONNECTIONS ARE OPENED IN TASKS!

		// Start all tasks. If you need manual control, use the content of this function to
		// start each task individually.
		//	COMP->startAllTasks();


		std::cout << "starting managementTask" << std::endl;
		COMP->managementTask->start();

		/*if(COMP->getGlobalState().getServices().getShow_base()) {
			std::cout << "starting baseTask" << std::endl;
			COMP->baseTask->start();
		}

		if(COMP->getGlobalState().getServices().getShow_cur_map()) {
			std::cout << "starting curMapTask" << std::endl;
			COMP->curMapTask->start();
		}

		if(COMP->getGlobalState().getServices().getShow_kinect_image()) {
			std::cout << "starting kinectTask" << std::endl;
			COMP->kinectTask->start();
		}

		if(COMP->getGlobalState().getServices().getShow_laser_1()) {
			std::cout << "starting laser1Task" << std::endl;
			COMP->laser1Task->start();
		}

		if(COMP->getGlobalState().getServices().getShow_laser_2()) {
			std::cout << "starting laser2Task" << std::endl;
			COMP->laser2Task->start();
		}

		if(COMP->getGlobalState().getServices().getShow_laser_3()) {
			std::cout << "starting laser3Task" << std::endl;
			COMP->laser3Task->start();
		}

		if(COMP->getGlobalState().getServices().getShow_person_detection()) {
			std::cout << "starting personDetectionTask" << std::endl;
			COMP->personDetectionTask->start();
		}

		if(COMP->getGlobalState().getServices().getShow_tof_image()) {
			std::cout << "starting tofTask" << std::endl;
			COMP->tofTask->start();
		}

		if(COMP->getGlobalState().getServices().getShow_ultrasonic_point_cloud()) {
			std::cout << "starting ultrasonicTask" << std::endl;
			COMP->uSArTask->start();
		}

		if(COMP->getGlobalState().getServices().getShow_ir()) {
				std::cout << "starting irTask" << std::endl;
				COMP->iRTask->start();
			}


		// Start all timers. If you need manual control, use the content of this function to
		// start each timer individually.
		// COMP->startAllTimers();

		if(COMP->getGlobalState().getServices().getShow_ltm()) {
			COMP->ltmTimer->start();
		}*/



		// Notify the component that setup/initialization is finished.
		// You may move this function to any other place.
		COMP->setStartupFinished();
}

void CompHandler::onShutdown() 
{
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";
	
}
