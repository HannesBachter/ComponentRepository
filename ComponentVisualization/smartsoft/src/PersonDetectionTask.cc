//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "PersonDetectionTask.hh"
#include "ComponentVisualization.hh"

#include <iostream>

PersonDetectionTask::PersonDetectionTask(SmartACE::SmartComponent *comp) 
:	PersonDetectionTaskCore(comp)
{
	std::cout << "constructor PersonDetectionTask\n";
}
PersonDetectionTask::~PersonDetectionTask() 
{
	std::cout << "destructor PersonDetectionTask\n";
}



int PersonDetectionTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	personDetection = new PersonDetectionVisualization(COMP->getWindow3d(), "PersonDetection");

	Smart::StatusCode status;

	std::cout << "connecting to: " << COMP->connections.personDetectionQueryClient.serverName << "; "
			<< COMP->connections.personDetectionQueryClient.serviceName << std::endl;
	status = COMP->personDetectionQueryClient->connect(COMP->connections.personDetectionQueryClient.serverName,
			COMP->connections.personDetectionQueryClient.serviceName);
	while (status != Smart::SMART_OK)
	{
		usleep(500000);
		status = COMP->personDetectionQueryClient->connect(COMP->connections.personDetectionQueryClient.serverName,
				COMP->connections.personDetectionQueryClient.serviceName);
	}
	std::cout << "connected.\n";

	std::cout << "connecting to: " << COMP->connections.personDetectionEventClient.serverName << "; "
			<< COMP->connections.personDetectionEventClient.serviceName << std::endl;
	 status = COMP->personDetectionEventClient->connect(COMP->connections.personDetectionEventClient.serverName,
			COMP->connections.personDetectionEventClient.serviceName);
	while (status != Smart::SMART_OK)
	{
		usleep(500000);
		status = COMP->personDetectionEventClient->connect(COMP->connections.personDetectionEventClient.serverName,
				COMP->connections.personDetectionEventClient.serviceName);
	}
	std::cout << "connected.\n";

	// Register to Event


	COMP->personDetectionEventClient->activate(Smart::continuous, eventParameter, id);
	std::cout << "Registered to PD Server Event!" << std::endl;

	return (personDetection !=0)?0:1;
}
int PersonDetectionTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel

	COMP->personDetectionEventClient->getNextEvent(id, eventResult);

	std::vector<CommTrackingObjects::CommDetectedPerson> persons;
	CommTrackingObjects::CommPersonId queryRequest;
	CommTrackingObjects::CommDetectedPerson queryResult;

	std::cout << "[PersonDetection] env_id: " << eventResult.getEnvironment_id() << "\n";

	for (size_t i =0; i < eventResult.getPerson_idSize(); ++i){
		//queryRequest.setId(eventResult.getPerson_idCopy(i));
		queryRequest.setId(eventResult.getPerson_idRef()[i]);
		COMP->personDetectionQueryClient->query(queryRequest, queryResult);
		if (queryResult.getIs_valid()){
			persons.push_back(queryResult);
		}
	}

	personDetection->clear();
	personDetection->displayPersons(persons);

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int PersonDetectionTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	delete personDetection;
	COMP->personDetectionQueryClient->disconnect();
	COMP->personDetectionEventClient->disconnect();
	COMP->personDetectionEventClient->deactivate(id);
	return 0;
}
