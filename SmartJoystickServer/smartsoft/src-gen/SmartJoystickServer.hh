//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _SMARTJOYSTICKSERVER_HH
#define _SMARTJOYSTICKSERVER_HH
	
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "SmartJoystickServerCore.hh"
#include "SmartJoystickServerImpl.hh"

// include communication objects
#include <CommBasicObjects/CommJoystick.hh>
#include <CommBasicObjects/CommJoystickACE.hh>

// include tasks
#include "JoystickTask.hh"
// include UpcallManagers

// include input-handler
// include input-handler


// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"

#define COMP SmartJoystickServer::instance()

class SmartJoystickServer : public SmartJoystickServerCore {
private:
	static SmartJoystickServer _smartJoystickServer;
	
	// constructor
	SmartJoystickServer();
	
	// copy-constructor
	SmartJoystickServer(const SmartJoystickServer& cc);
	
	// destructor
	~SmartJoystickServer() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
public:
	// component
	SmartJoystickServerImpl *component;
	Smart::ITask *opcUaComponentTask;
	
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	Smart::TaskTriggerSubject* joystickTaskTrigger;
	JoystickTask *joystickTask;
	
	// define input-ports
	
	// define request-ports
	
	// define input-handler
	
	// define output-ports
	Smart::IPushServerPattern<CommBasicObjects::CommJoystick> *joystickServcieOut;
	
	// define answer-ports
	
	// define request-handlers
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	
	void init(int argc, char *argv[]);
	void run();
	
	void setStartupFinished();
	Smart::StatusCode connectAndStartAllServices();
	void startAllTasks();
	void startAllTimers();
	

	// return singleton instance
	static SmartJoystickServer* instance()
	{
		return (SmartJoystickServer*)&_smartJoystickServer;
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct JoystickTask_struct {
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} joystickTask;
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
		struct JoystickServcieOut_struct {
				std::string serviceName;
		} joystickServcieOut;
	
		//--- client port parameter ---
		
	} connections;
};
#endif
