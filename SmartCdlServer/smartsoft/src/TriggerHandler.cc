//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft CDL component".
//  It provides navigation services based on the CDL
//  Curvature Distance Lookup approach.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "TriggerHandler.hh"

#include "SmartCdlServer.hh"

// trigger user methods
void TriggerHandler::handleCommNavigationObjects_CdlParameter_SETSTRATEGY(const SETSTRATEGYType::stratType &strat)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	COMP->triggerStrategy(strat);
}
void TriggerHandler::handleCommNavigationObjects_CdlParameter_SETGOALREGION(const int &goalId)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	//<alexej>
	// TODO: this part needs to be redesigned
	COMP->setGoalId(goalId);
    //<lutz>
    CommNavigationObjects::CdlGoalEventState cdlGoalEventState;
    cdlGoalEventState.set(CommNavigationObjects::CdlGoalEventType::CDL_GOAL_NOT_REACHED);
    COMP->goalEventServer->put(cdlGoalEventState);
    std::cout<<"CDL EVENT CDL_GOAL_NOT_REACHED!"<<std::endl;
    //<lutz>
    //</alexej>
}
void TriggerHandler::handleCommNavigationObjects_CdlParameter_SAVECURPOS(const int &goalId)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	//<alexej>
	// this trigger gets the last goalID and triggers the Task to save the current pos
	// I am not sure if this is the best solution (seems to require a redesign here)
	COMP->triggerSavePos(goalId);
	//</alexej>
}
