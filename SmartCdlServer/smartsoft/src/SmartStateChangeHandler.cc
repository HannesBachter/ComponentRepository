//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft CDL component".
//  It provides navigation services based on the CDL
//  Curvature Distance Lookup approach.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "SmartStateChangeHandler.hh"
#include "SmartCdlServer.hh"

#include <iostream>

// Called when a substate is entered
void SmartStateChangeHandler::handleEnterState(const std::string & substate) throw()
{
	// change this code to your needs !!!
	COMP->cdlTask->resetRobotStalledFlag();

	if(substate == "moveRobot")
	{
		COMP->laserClient->subscribe();
	}

	if(COMP->getGlobalState().getServer().getTrackerInit())
	{
		COMP->trackingClient->subscribe();
	}
	if(COMP->getGlobalState().getServer().getPlannerInit())
	{
		COMP->plannerClient->subscribe();
	}
	//  do not subscribe base client (is done only if used by the specific strategy)
	//	if(COMP->getGlobalState().getServer().getBaseClientInit())
	//	{
	//		COMP->baseStateClient->subscribe(1);
	//	}
}

// Called when a substate is left
void SmartStateChangeHandler::handleQuitState(const std::string & substate) throw()
{
    std::cout << "    quitHandler   deactivate " << substate << std::endl;

    // avoid emergency stop -> if cdl sends no more navigationVelocity-Object to the base,
    // the watchdog of the base (AROS) will arise and thus doing an emergency stop.
    CommBasicObjects::CommNavigationVelocity vel;
    vel.set_vX(0, 0.001);
    vel.set_omega(0);
    COMP->navVelSendClient->send(vel);

    if(substate == "moveRobot")
    {
    	COMP->laserClient->unsubscribe();
    }

	if(COMP->getGlobalState().getServer().getTrackerInit())
	{
		COMP->trackingClient->unsubscribe();
	}
	if(COMP->getGlobalState().getServer().getPlannerInit())
	{
		COMP->plannerClient->unsubscribe();
	}
	if(COMP->getGlobalState().getServer().getBaseClientInit())
	{
		COMP->baseStateClient->unsubscribe();
	}

}
