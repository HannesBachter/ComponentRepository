//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft CDL component".
//  It provides navigation services based on the CDL
//  Curvature Distance Lookup approach.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#ifndef _SMARTCDLSERVERCORE_HH
#define _SMARTCDLSERVERCORE_HH
	
#include "aceSmartSoft.hh"

#include <iostream>
#include <fstream>

#include "smartCdlLookup.hh"

#include "TriggerHandler.hh"

class SmartCdlServerCore
{
private:
	mutable SmartACE::SmartMutex mutex;
	bool saveFlag;
	int counter;
	long goalId;
	TriggerHandler::SETSTRATEGYType::stratType strategy;
	bool strategyChanged;

	int desV;
	double desW;

public:
	CdlLookupClass cdlLookupDefault;
	CdlLookupClass cdlLookupSecond;
	CdlLookupClass *cdlLookup;


	std::ofstream cdlLookupdebug;
	/**
	 * @see CdlStateStruct
	 */
	//<alexej>
	// is this really the right place for global/local structs?
	//struct CdlStateStruct CDLglobalState, CDLlocalState;
//	CdlStateStruct CDLlocalState;
//	CHS::SmartMutex CdlGlobalLock; // lock for CDLs own global state
	//</alexej>

	SmartCdlServerCore();

	void triggerGoalRegion(const double &goalX, const double &goalY, const double &goalA, const int &goalId);
	void getGoalRegion(const double &goalX, const double &goalY, const double &goalA, const int &goalId) const;

	TriggerHandler::SETSTRATEGYType::stratType getStrategy() const;
	void triggerStrategy(const TriggerHandler::SETSTRATEGYType::stratType &strat);
	bool isStrategyTriggered();

	long getGoalId() const;
	void setGoalId(const long &goalId);
	void triggerSavePos(const long &goalId);
	bool isSavePosTriggered();

	void resetCounter();
	int getCounter() const;
	void incrementCounter();

	//set the desired velocities
	void setDesiredVelocities(int v,double w);
	void getDesiredVelocities(int& v,double& w) const;
};
	
#endif
