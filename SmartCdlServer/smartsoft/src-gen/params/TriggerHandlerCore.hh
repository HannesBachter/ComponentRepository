//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _TRIGGERHANDLERCORE_HH
#define _TRIGGERHANDLERCORE_HH


#include <string>
#include <iostream>
#include <list>

class TriggerHandlerCore
{
	friend class ParamUpdateHandler;
	
public:
	TriggerHandlerCore() 
	{  
	}
	virtual ~TriggerHandlerCore() {  }

	// trigger user methods
	
		
		virtual void handleCommNavigationObjects_CdlParameter_SAVECURPOS(const int &goalId) = 0;
	
		
		virtual void handleCommNavigationObjects_CdlParameter_SETGOALREGION(const int &goalId) = 0;
	
		class SETSTRATEGYType {
		public:
		
			/**
			 * Wrapper class for Enum strat
			 */
			class stratType {
			public:
				enum ENUM_strat {
					ENUM_VALUE_UNDEFINED = 0,
					NEUTRAL = 1,
					REACTIVE = 2,
					JOYSTICK = 3,
					TURN = 4,
					APPROACH_FLAT_SURF = 5,
					APPROACH_HALT = 6,
					APPROACH_COVERAGE = 7,
					APPROACH = 8,
					ROTATE = 9,
					FOLLOW = 10,
					BACKWARD = 11,
					PATH_NAV = 12,
					VELCHECK = 13
				};
				
				// default constructor
				stratType() { 
					value = ENUM_VALUE_UNDEFINED;
				}
				
				// copy constructor for enum type
				stratType(ENUM_strat e) {
					value = e;
				}
				
				// copy constructor for String type
				stratType(const std::string &literal) {
					from_string(literal);
				}
				
				// from_string assignment operator
				stratType& operator = (const std::string &literal) {
					from_string(literal);
					return *this;
				}
				
				// ENUM operator
				operator ENUM_strat() const {
					return value;
				}
				
				// String operator
				operator std::string() const {
					return to_string();
				}
				
				// compare operator
				bool operator == (const ENUM_strat t) const {
					return this->value == t;
				}
				
				std::string to_string() const {
					std::string result = "";
					switch (value) {
						case APPROACH:
							result = "APPROACH";
							break;
						case APPROACH_COVERAGE:
							result = "APPROACH_COVERAGE";
							break;
						case APPROACH_FLAT_SURF:
							result = "APPROACH_FLAT_SURF";
							break;
						case APPROACH_HALT:
							result = "APPROACH_HALT";
							break;
						case BACKWARD:
							result = "BACKWARD";
							break;
						case FOLLOW:
							result = "FOLLOW";
							break;
						case JOYSTICK:
							result = "JOYSTICK";
							break;
						case NEUTRAL:
							result = "NEUTRAL";
							break;
						case PATH_NAV:
							result = "PATH_NAV";
							break;
						case REACTIVE:
							result = "REACTIVE";
							break;
						case ROTATE:
							result = "ROTATE";
							break;
						case TURN:
							result = "TURN";
							break;
						case VELCHECK:
							result = "VELCHECK";
							break;
						default:
							result = "ENUM_VALUE_UNDEFINED";
							break;
					};
					return result;
				}
				
				void from_string(const std::string &literal) {
					if(literal == "NEUTRAL") {
						value = NEUTRAL;
					} else if(literal == "REACTIVE") {
						value = REACTIVE;
					} else if(literal == "JOYSTICK") {
						value = JOYSTICK;
					} else if(literal == "TURN") {
						value = TURN;
					} else if(literal == "APPROACH_FLAT_SURF") {
						value = APPROACH_FLAT_SURF;
					} else if(literal == "APPROACH_HALT") {
						value = APPROACH_HALT;
					} else if(literal == "APPROACH_COVERAGE") {
						value = APPROACH_COVERAGE;
					} else if(literal == "APPROACH") {
						value = APPROACH;
					} else if(literal == "ROTATE") {
						value = ROTATE;
					} else if(literal == "FOLLOW") {
						value = FOLLOW;
					} else if(literal == "BACKWARD") {
						value = BACKWARD;
					} else if(literal == "PATH_NAV") {
						value = PATH_NAV;
					} else if(literal == "VELCHECK") {
						value = VELCHECK;
					} else {
						value = ENUM_VALUE_UNDEFINED;
					}
				}
				
				// helper method to easily implement output stream
				void to_ostream(std::ostream &os = std::cout) const {
					os << to_string();
				}
			private:
				ENUM_strat value;
			};
			
		}; // end class SETSTRATEGYType
		
		virtual void handleCommNavigationObjects_CdlParameter_SETSTRATEGY(const SETSTRATEGYType::stratType &strat) = 0;
	
	// extended trigger user methods
	
private:
	// trigger internal methods
	void handleCommNavigationObjects_CdlParameter_SAVECURPOSCore(const int &goalId);
	void handleCommNavigationObjects_CdlParameter_SETGOALREGIONCore(const int &goalId);
	void handleCommNavigationObjects_CdlParameter_SETSTRATEGYCore(const SETSTRATEGYType::stratType &strat);
	
	// extended trigger internal methods 
};

#endif // _TRIGGERHANDLERCORE_HH
