//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _SMARTMAPPERGRIDMAP_HH
#define _SMARTMAPPERGRIDMAP_HH
	
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "SmartMapperGridMapCore.hh"
#include "SmartMapperGridMapImpl.hh"

// include communication objects
#include <CommNavigationObjects/CommGridMap.hh>
#include <CommNavigationObjects/CommGridMapACE.hh>
#include <CommNavigationObjects/CommGridMapRequest.hh>
#include <CommNavigationObjects/CommGridMapRequestACE.hh>
#include <CommBasicObjects/CommMobileLaserScan.hh>
#include <CommBasicObjects/CommMobileLaserScanACE.hh>

// include tasks
#include "CurMapTask.hh"
#include "LtmMapTask.hh"
// include UpcallManagers
#include "LaserServiceInUpcallManager.hh"

// include input-handler
// include input-handler
#include "CurrQueryServerHandler.hh"
#include "LtmQueryServerHandler.hh"

// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"

#define COMP SmartMapperGridMap::instance()

class SmartMapperGridMap : public SmartMapperGridMapCore {
private:
	static SmartMapperGridMap _smartMapperGridMap;
	
	// constructor
	SmartMapperGridMap();
	
	// copy-constructor
	SmartMapperGridMap(const SmartMapperGridMap& cc);
	
	// destructor
	~SmartMapperGridMap() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
public:
	// component
	SmartMapperGridMapImpl *component;
	
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	Smart::TaskTriggerSubject* curMapTaskTrigger;
	CurMapTask *curMapTask;
	Smart::TaskTriggerSubject* ltmMapTaskTrigger;
	LtmMapTask *ltmMapTask;
	
	// define input-ports
	// InputPort LaserServiceIn
	Smart::IPushClientPattern<CommBasicObjects::CommMobileLaserScan> *laserServiceIn;
	Smart::InputTaskTrigger<CommBasicObjects::CommMobileLaserScan> *laserServiceInInputTaskTrigger;
	LaserServiceInUpcallManager *laserServiceInUpcallManager;
	
	// define request-ports
	
	// define input-handler
	
	// define output-ports
	Smart::IPushServerPattern<CommNavigationObjects::CommGridMap> *currMapOut;
	
	// define answer-ports
	Smart::IQueryServerPattern<CommNavigationObjects::CommGridMapRequest, CommNavigationObjects::CommGridMap,SmartACE::QueryId> *currQueryServer;
	Smart::QueryServerTaskTrigger<CommNavigationObjects::CommGridMapRequest, CommNavigationObjects::CommGridMap,SmartACE::QueryId> *currQueryServerInputTaskTrigger;
	Smart::IQueryServerPattern<CommNavigationObjects::CommGridMapRequest, CommNavigationObjects::CommGridMap,SmartACE::QueryId> *ltmQueryServer;
	Smart::QueryServerTaskTrigger<CommNavigationObjects::CommGridMapRequest, CommNavigationObjects::CommGridMap,SmartACE::QueryId> *ltmQueryServerInputTaskTrigger;
	
	// define request-handlers
	CurrQueryServerHandler *currQueryServerHandler;
	LtmQueryServerHandler *ltmQueryServerHandler;
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	
	void init(int argc, char *argv[]);
	void run();
	
	void setStartupFinished();
	Smart::StatusCode connectAndStartAllServices();
	void startAllTasks();
	void startAllTimers();
	
	Smart::StatusCode connectLaserServiceIn(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static SmartMapperGridMap* instance()
	{
		return (SmartMapperGridMap*)&_smartMapperGridMap;
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialMainState;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct CurMapTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} curMapTask;
		struct LtmMapTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} ltmMapTask;
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
		struct CurrMapOut_struct {
				std::string serviceName;
		} currMapOut;
		struct CurrQueryServer_struct {
				std::string serviceName;
		} currQueryServer;
		struct LtmQueryServer_struct {
				std::string serviceName;
		} ltmQueryServer;
	
		//--- client port parameter ---
		struct LaserServiceIn_struct {
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
		} laserServiceIn;
	} connections;
};
#endif
