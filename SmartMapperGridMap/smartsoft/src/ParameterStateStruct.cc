//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Mapper/GridMapper component".
//  It provides mapping services based on grid maps. The current map
//  represents the latest snapshot of the local surrounding based on
//  laserscans. The current map can be preoccupied by the longterm map.
//  The longterm map is a simple occupancy grid map.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "ParameterStateStruct.hh"

#include "SmartMapperGridMap.hh"

SmartACE::ParamResponseType ParameterStateStruct::handleCOMMIT(const ParameterStateStruct &commitState) {
	// implement any consistency checks here which ensure that the incoming parameter meets components
	// internal constraints. If the current parameter violates any consistency checks, return 
	// SmartACE::ParamResponseType::INVALID, which will result in this commitState to be rejected (not 
	// copied into the globalState) and the corresponding response type is communicated back to the
	// ParameterMaster. Be aware, that you should avoid blocking calls here. If you need blocking
	// calls, use an active trigger in combination with commit.

	if(commitState.getCommNavigationObjects().getMapperParams().getCURLTM().getPreoccupation() == ParameterStateStruct::CommNavigationObjectsType::MapperParamsType::CURLTMType::preoccupationType::ENABLE) //set threshold only if preoccupation is enabled
	{
		COMP->ltm_state = true;
		COMP->ltm_threshold = commitState.getCommNavigationObjects().getMapperParams().getCURLTM().getThreshold();
	} else {
		COMP->ltm_state = false;
	}

	return SmartACE::ParamResponseType::OK;
}

// implement your custom getter methods here
