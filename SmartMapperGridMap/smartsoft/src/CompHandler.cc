//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CompHandler.hh"
#include "SmartMapperGridMap.hh"

#include <iostream>

// include communication objects


void CompHandler::onStartup() 
{
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	Smart::StatusCode status;

    char *growing;
    int p1,p2,p3,p4,p5;


	if(COMP->getGlobalState().getCommNavigationObjects().getMapperParams().getCURLTM().getPreoccupation() == ParameterStateStruct::CommNavigationObjectsType::MapperParamsType::CURLTMType::preoccupationType::ENABLE) //set threshold only if preoccupation is enabled
	{
		COMP->ltm_state = true;
		COMP->ltm_threshold = COMP->getGlobalState().getCommNavigationObjects().getMapperParams().getCURLTM().getThreshold();
	} else {
		COMP->ltm_state = false;
		COMP->ltm_threshold = COMP->getGlobalState().getCommNavigationObjects().getMapperParams().getCURLTM().getThreshold();
	}


    growing = (char *)COMP->getGlobalState().getCurrentMap().getGrowing().c_str();
    COMP->growingType = MAPPER_GROWING_NO;
    if (strcmp(growing,"circle40")==0) COMP->growingType = MAPPER_GROWING_CIRCLE_40;
    if (strcmp(growing,"circle32")==0) COMP->growingType = MAPPER_GROWING_CIRCLE_32;
    if (strcmp(growing,"circle20")==0) COMP->growingType = MAPPER_GROWING_CIRCLE_20;
	if (strcmp(growing,"circle16")==0) COMP->growingType = MAPPER_GROWING_CIRCLE_16;
	if (strcmp(growing,"circle8")==0)  COMP->growingType = MAPPER_GROWING_CIRCLE_8;
	if (strcmp(growing,"star16")==0)   COMP->growingType = MAPPER_GROWING_STAR_16;
	if (strcmp(growing,"star32")==0)   COMP->growingType = MAPPER_GROWING_STAR_32;
	if (strcmp(growing,"no")==0)       COMP->growingType = MAPPER_GROWING_NO;

	p1 = COMP->getGlobalState().getCurrentMap().getXsize();
	p2 = COMP->getGlobalState().getCurrentMap().getYsize();
	p3 = COMP->getGlobalState().getCurrentMap().getXpos();
	p4 = COMP->getGlobalState().getCurrentMap().getYpos();
	p5 = COMP->getGlobalState().getCurrentMap().getId();

	// create current map
	COMP->currentGridMap = new Smart::SmartCurrentGridMap( p1, p2, p3, p4,
			COMP->getGlobalState().getGeneral().getCellsize(),
			COMP->growingType,
			p5);

	p1 = COMP->getGlobalState().getLtmMap().getXsize();
	p2 = COMP->getGlobalState().getLtmMap().getYsize();
	p3 = COMP->getGlobalState().getLtmMap().getXpos();
	p4 = COMP->getGlobalState().getLtmMap().getYpos();
	p5 = COMP->getGlobalState().getLtmMap().getId();

	// create longterm map
	COMP->ltmGridMap = new Smart::SmartLtmGridMap( p1, p2, p3, p4,
			COMP->getGlobalState().getGeneral().getCellsize(),
			p5);

	// Start all services. If you need manual control, use the content of this function to
	// connect and start each service individually, e.g:
	// COMP->connectMyPortName("SmartExampleComponent", "examplePort");
	status = COMP->connectAndStartAllServices();
	
	// Start all tasks. If you need manual control, use the content of this function to
	// start each task individually.
	COMP->startAllTasks();
	
	// Start all timers. If you need manual control, use the content of this function to
	// start each timer individually.
	COMP->startAllTimers();
	
	// Notify the component that setup/initialization is finished.
	// You may move this function to any other place.
	COMP->setStartupFinished(); 
}

void CompHandler::onShutdown() 
{
	delete COMP->currentGridMap;
	delete COMP->ltmGridMap;
	std::cout << "shutdown - put your cleanup code in CompHandler::onShutdown()!!!\n";
	
}
