//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------

#include "SpeechSendHandler.hh"
#include "ComponentTTS.hh"
#include <iostream>

SpeechSendHandler::SpeechSendHandler(Smart::InputSubject<DomainSpeech::CommSpeechOutputMessage> *subject, const int &prescaleFactor)
:	SpeechSendHandlerCore(subject, prescaleFactor)
{
	std::cout << "constructor SpeechSendHandler\n";
}
SpeechSendHandler::~SpeechSendHandler() 
{
	std::cout << "destructor SpeechSendHandler\n";
}

void SpeechSendHandler::on_SpeechSendServiceIn(const DomainSpeech::CommSpeechOutputMessage &input)
{
	// implement business logic here
	// (do not use blocking calls here, otherwise this might block the InputPort SpeechSendServiceIn)
    COMP->_queue_mutex.acquire();
    COMP->_queue.push_back(ComponentTTS::QueueEntry(input));
    COMP->_queue_mutex.release();
    COMP->_queue_sem.release();
}
