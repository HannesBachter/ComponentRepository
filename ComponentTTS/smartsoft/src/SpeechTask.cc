//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------

#include "SpeechTask.hh"
#include "ComponentTTS.hh"

#include <iostream>

SpeechTask::SpeechTask(SmartACE::SmartComponent *comp) 
:	SpeechTaskCore(comp)
{
	std::cout << "constructor SpeechTask\n";
}
SpeechTask::~SpeechTask() 
{
	std::cout << "destructor SpeechTask\n";
}



int SpeechTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int SpeechTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel

	// to get the incoming data, use this methods:
	Smart::StatusCode status;


	COMP->_queue_sem.acquire();

	// pop queue entry
	COMP->_queue_mutex.acquire();
	ComponentTTS::QueueEntry entry = COMP->_queue.front();
	COMP->_queue.pop_front();
	COMP->_queue_mutex.release();

	// process queue entry:

	std::cout << "$$ Processing speech queue entry: \"" << entry.msg.get_message().c_str() << "\"" << std::endl;

	CommBasicObjects::CommPropertySet answer;

	// check time stamp
	if(entry.msg.get_discard_time().is_before(CommBasicObjects::CommTimeStamp::now()))
	{
		//		answer.set("success",false);
		//		answer.set("discarded",true);
		std::cout << "$$ if(entry.msg.get_discard_time().is_before(CommBasicObjects::CommTimeStamp::now()))"<< std::endl;
		answer.resizeSets(2);
		CommBasicObjects::PropertyItemEntry entry;
		entry.setKey("success").setValue("false");
		answer.setItemsElemAtPos(0, entry);
		entry.setKey("discarded").setValue("true");
		answer.setItemsElemAtPos(1, entry);
	}
	else
	{
		std::cout << "$$ else of if(entry.msg.get_discard_time().is_before(CommBasicObjects::CommTimeStamp::now()))"<< std::endl;
		// open pipe to text2speech program
		FILE *text2speech_pipe = ::popen(COMP->getGlobalState().getSettings().getPlayer().c_str(), "w");
		if(text2speech_pipe)
		{
			std::cout << "$$ if(text2speech_pipe)";
			::fprintf(text2speech_pipe, "%s\n", entry.msg.get_message().c_str());
			if(::pclose(text2speech_pipe)<0)
			{
				std::cout << "$$ if(::pclose(text2speech_pipe)<0)";
				//answer.set("success",false);
				//answer.set("discarded",false);
				//answer.set("error",std::string("Failed to close \"") + COMP->ini.Settings.player + "\"");
				answer.resizeSets(2);
				CommBasicObjects::PropertyItemEntry entry;
				entry.setKey("success").setValue("false");
				answer.setItemsElemAtPos(0, entry);
				entry.setKey("discarded").setValue("false");
				answer.setItemsElemAtPos(1, entry);

				std::cout << "Failed to close \"" << COMP->getGlobalState().getSettings().getPlayer() + "\"" << std::endl;
			}
			else
			{
				std::cout << "$$ else of if(::pclose(text2speech_pipe)<0)"<< std::endl;
				//		answer.set("success",true);
				//		answer.set("discarded",false);
				std::cout << "If setting is correct then it should play now !! ";
				answer.resizeSets(2);
				CommBasicObjects::PropertyItemEntry entry;
				entry.setKey("success").setValue("true");
				answer.setItemsElemAtPos(0, entry);
				entry.setKey("discarded").setValue("false");
				answer.setItemsElemAtPos(1, entry);
			}
		}
		else
		{
			std::cout << "$$ else of if(text2speech_pipe)";
			// pipe open failed
			//	  answer.set("success",false);
			//	  answer.set("discarded",false);
			//	  answer.set("error",std::string("Failed to open \"") + COMP->ini.text2speech.player + "\"");

			answer.resizeSets(2);
			CommBasicObjects::PropertyItemEntry entry;
			entry.setKey("success").setValue("false");
			answer.setItemsElemAtPos(0, entry);
			entry.setKey("discarded").setValue("false");
			answer.setItemsElemAtPos(1, entry);

			std::cout << "Failed to open \"" << COMP->getGlobalState().getSettings().getPlayer() + "\"" << std::endl;
		}
	}


	// answer query, unless request was plain "send"
	if(entry.query_server)
	{
		entry.query_server->answer(entry.id, answer);
	}






	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int SpeechTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
