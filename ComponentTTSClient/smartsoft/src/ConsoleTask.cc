//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge, 2011 Dennis Stampfer
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------

#include "ConsoleTask.hh"
#include "ComponentTTSClient.hh"

#include <iostream>

ConsoleTask::ConsoleTask(SmartACE::SmartComponent *comp) 
:	ConsoleTaskCore(comp)
{
	std::cout << "constructor ConsoleTask\n";
}
ConsoleTask::~ConsoleTask() 
{
	std::cout << "destructor ConsoleTask\n";
}

int ConsoleTask::on_entry()
{



	viaQuery = false;

	std::cout << "Use speech send or query [s/q]?" << std::endl;
    while(true)
    {
      std::cin.get(ch);
      if(ch=='\n') break;
      oss.put(ch);
    }
    const std::string txt = oss.str();
    if(txt == "s") {
    	std::cout << "Using send." << std::endl;
    	viaQuery = false;
    } else {
    	std::cout << "Using query." << std::endl;
    	viaQuery = true;
    }

	return 0;
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}

int ConsoleTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}

int ConsoleTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	Smart::StatusCode status;

	  std::cout << "Enter your text ('quit' to exit): " << std::endl;

	  oss.str("");	// clear the stingstream
      while(true)
      {
        std::cin.get(ch);
        if(ch=='\n') break;
        oss.put(ch);
      }
      const std::string txt = oss.str();

      if(txt=="quit")
    	  return 0;

      DomainSpeech::CommSpeechOutputMessage msg(txt);
      msg.print();

      if(viaQuery)
      {
    	  CommBasicObjects::CommPropertySet answer;
    	  status = COMP->speechQueryServiceReq->query(msg, answer);
      }
      else
      {
    	  status = COMP->speechSendServiceOut->send(msg);
      }


      if(status != Smart::SMART_OK)
      {
    	  std::cout << "Error sending speech: " << Smart::StatusCodeConversion(status) << std::endl;
      }
      else
      {
    	  std::cout << "sending speech status =: " << Smart::StatusCodeConversion(status) << std::endl;
      }


	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
