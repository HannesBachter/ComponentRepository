//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "TriggerHandler.hh"

#include "SmartPlannerBreadthFirstSearch.hh"

// trigger user methods
void TriggerHandler::handleCommNavigationObjects_PlannerParams_SETDESTINATIONLINE(const int &x1, const int &y1, const int &x2, const int &y2)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.

	COMP->PlannerGoalLock.acquire();
	goalFifoWrite(COMP->goalFifoHead, COMP->goalFifoTail, PLANNER_LINE, x1, y1, x2, y2);
	COMP->PlannerGoalLock.release();
	std::cout << "PLANNER_SET_DESTINATION_LINE new smartPlannerGoal destination line created.\n"
		<< "                     Parameters: " << x1 << " " << y1
		<< " " << x2 << " " << y2 <<" \n";
}
void TriggerHandler::handleCommNavigationObjects_PlannerParams_SETDESTINATIONCIRCLE(const int &x, const int &y, const unsigned int &r)
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	COMP->PlannerGoalLock.acquire();
	goalFifoWrite(COMP->goalFifoHead, COMP->goalFifoTail, PLANNER_CIRCLE, x, y, r, 0.0);
	COMP->PlannerGoalLock.release();
	std::cout << "PLANNER_SET_DESTINATION_CIRCLE new smartPlannerGoal destination circle created.\n"
		<< "                     Parameters: " << x << " " << y
		<< " " << r << " " <<" \n";
}
void TriggerHandler::handleCommNavigationObjects_PlannerParams_DELETEGOAL()
{
	// implement the trigger behavior here. Be aware, if you must use blocking calls here, please set this
	// trigger as active in the model. For an active trigger an active queue will be generated internally 
	// (transparent for the usage here). Thus an active trigger will be called within a separate task scope.
	COMP->PlannerGoalLock.acquire();
	goalFifoFree(COMP->goalFifoHead, COMP->goalFifoTail);
	COMP->PlannerGoalLock.release();
	std::cout << "PLANNER_DELETE_GOAL smartPlannerGoal deleted.\n";
}
