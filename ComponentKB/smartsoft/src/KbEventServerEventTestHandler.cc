//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "KbEventServerEventTestHandler.hh"
#include "ComponentKB.hh"

KbEventServerEventTestHandler::KbEventServerEventTestHandler():
	fireEvent(false),
	lock(),
	sema(0),
	answerCond(lock){

}

void KbEventServerEventTestHandler::shutdownReleaseSema(){
	sema.release();
}

//THIS IS NOT THE NORMAL USE OF A SMART EVENT TEST HANDLER!!!
//due to the language interface, lisp-c the state (the current info) is transmitted through an local buffer, writeable from both side lisp + c
bool KbEventServerEventTestHandler::testEvent(
	CommBasicObjects::CommKBEventParam &p,
	CommBasicObjects::CommKBEventResult &r,
	const CommBasicObjects::CommVoid &s
) throw() {
	bool result = false;

	ACE_Time_Value start = ACE_OS::gettimeofday();
//	std::cout<<__FUNCTION__<<" -->testEvent p: "<<p.getQuery()<<std::endl;
//	std::cout<<__FUNCTION__<<"PROCESSING -->"<<std::endl;

//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
	lock.acquire();
	this->param = p;
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
	sema.release();
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
	answerCond.wait();
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;

//	std::cout<<__FUNCTION__<<"-->DONE."<<std::endl;

	//if change is detected save latest state to param (prevent further events without change!)
	if(this->fireEvent == true){
		p.setLatestState(this->ans.getResult());
		r = this->ans;
	} else {
		//leave param unchanged!
		//answer is not used --> do nothing!
		//r = this->ans;
	}
	result = this->fireEvent;
//	std::cout<<__FUNCTION__<<"FireEvent?: "<<result<<std::endl;

	lock.release();
	ACE_Time_Value end = ACE_OS::gettimeofday();
	std::cout<<"Test Event took: "<<end - start<<std::endl;
   	return result;
}

void KbEventServerEventTestHandler::onActivation(const CommBasicObjects::CommKBEventParam& p){
	CommBasicObjects::CommVoid dummy;
	std::cout<<"[EVENT-ACTIVATION] param: "<<p.getQuery()<<std::endl;
	COMP->kbEventServer->put(dummy);
}

int KbEventServerEventTestHandler::getCheckEventParam(CommBasicObjects::CommKBEventParam &param) const{
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
	int res = sema.acquire();
	if(res <0){
		std::cout<<"WARNING: getCheckEventParam sema.acquire_done res: "<<res<<" errno: "<< errno<<" - "<<ACE_OS::gettimeofday()<<std::endl;
	}
	lock.acquire();
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
	param = this->param;
	lock.release();
	if(COMP->comp_shutdown == true){
		std::cout<<"COMP_SHUTDOWN == true"<<std::endl;
		res = -1;
	}
	return res;
}

void KbEventServerEventTestHandler::answerCheckEventParam(const CommBasicObjects::CommKBEventResult &answer, bool fireEvent){
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
//	std::cout<<__FUNCTION__<<" fireEvent: "<<fireEvent<<std::endl;
        std::cout<<"lock address:"<<&lock<<std::endl;
	lock.acquire();
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
	this->ans = answer;
	this->fireEvent = fireEvent;
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
	answerCond.signal();
//	std::cout<<__FUNCTION__<<":"<<__LINE__<<std::endl;
	lock.release();
}
