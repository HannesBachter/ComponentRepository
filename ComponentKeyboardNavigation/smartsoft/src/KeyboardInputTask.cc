//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "KeyboardInputTask.hh"
#include "ComponentKeyboardNavigation.hh"

#include <iostream>

#include <stdio.h>
#include <termios.h>
#include <unistd.h>
#include <fcntl.h>

KeyboardInputTask::KeyboardInputTask(SmartACE::SmartComponent *comp) 
:	KeyboardInputTaskCore(comp)
{
	std::cout << "constructor KeyboardInputTask\n";
}
KeyboardInputTask::~KeyboardInputTask() 
{
	std::cout << "destructor KeyboardInputTask\n";
}

// Implementation on kbhit taken from :
// http://cboard.cprogramming.com/c-programming/63166-kbhit-linux.html
int kbhit(void)
{
  struct termios oldt, newt;
  int ch;
  int oldf;

  tcgetattr(STDIN_FILENO, &oldt);
  newt = oldt;
  newt.c_lflag &= ~(ICANON | ECHO);
  tcsetattr(STDIN_FILENO, TCSANOW, &newt);
  oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
  fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

  ch = getchar();

  tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
  fcntl(STDIN_FILENO, F_SETFL, oldf);

  if(ch != EOF)
  {
    ungetc(ch, stdin);
    return 1;
  }

  return 0;
}



int KeyboardInputTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
		// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further

		/*Arrow keys*/
		std::cout << "Use the arrow keys to control robot: " << std::endl
				<< "- Use up/down to increase/decrease speed." << std::endl
				<< "- Use left/right to increase/decrease heading angle" << std::endl
				<< "- Use q for an emergency fullstop" << std::endl
				<< "## Input your commands into this console window" << std::endl;

		/*WASD*/
		std::cout << "Use w/a/s/d to control robot: " << std::endl
					  << "- Use w/s to increase/decrease speed." << std::endl
					  << "- Use a/d to increase/decrease heading angle" << std::endl
					  << "- Use q for an emergency fullstop" << std::endl
					  << "## Input your commands into this console window" << std::endl;

		return 0;
}
int KeyboardInputTask::on_execute()
{
	// this method is called from an outside loop,
		// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
		// also do not use blocking calls which do not result from smartsoft kernel

		// The following code catches one key with getchar(). pressing arrow keys results in three keys.
		// Example of catching arrow keys: see http://stackoverflow.com/questions/10463201/getch-and-arrow-codes
		ParameterStateStruct::SettingsType localstate = COMP->getGlobalState().getSettings();

		if(kbhit()) {
			char c = getchar();

			/*Arrow keys*/
			if (c == '\033') { // if the first value is esc
			    getchar(); // skip the [
			    switch(getchar()) { // the real value
			        case 'A':
			        	std::cout << "Accelerating" << std::endl;
			        	x += localstate.getSpeedAcceleration();
			            break;
			        case 'B':
			        	std::cout << "Decreasing speed" << std::endl;
			        	x -= localstate.getSpeedAcceleration();
			            break;
			        case 'C':
			        	std::cout << "Shifting steering to right" << std::endl;
			        	omega -= localstate.getAngularAcceleration();
			            break;
			        case 'D':
			        	std::cout << "Shifting steering to left" << std::endl;
			        	omega += localstate.getAngularAcceleration();
			            break;
			    }
			 /*WASD*/
			}else if(c == 'w') {
				std::cout << "Accelerating" << std::endl;
				x += localstate.getSpeedAcceleration();
			} else if (c == 'd') {
				std::cout << "Shifting steering to right" << std::endl;
				omega -= localstate.getAngularAcceleration();
			} else if (c == 'a') {
				std::cout << "Shifting steering to left" << std::endl;
				omega += localstate.getAngularAcceleration();
			} else if (c == 's') {
				std::cout << "Decreasing speed" << std::endl;
				x -= localstate.getSpeedAcceleration();
			} else if (c == 'q') {
				std::cout << "Emergency fullstop" << std::endl;
				x = 0;
				omega = 0;
			}
			std::cout << "vX: " << x << "; omega: " << omega << std::endl;
		}

		CommBasicObjects::CommNavigationVelocity vel;
		vel.set_vX(x);
		vel.set_omega(omega);

		Smart::StatusCode status = COMP->navVelSendClient->send(vel);

		// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
		return 0;
}
int KeyboardInputTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
