//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _ROBOTTASK_CORE_HH
#define _ROBOTTASK_CORE_HH
	
#include "aceSmartSoft.hh"

// include upcall interface
#include "NavVelInUpcallInterface.hh"
#include "LocalizationUpdateUpcallInterface.hh"

// include communication-objects for output ports

	
class RobotTaskCore
:	public SmartACE::ManagedTask
,	public NavVelInUpcallInterface
,	public LocalizationUpdateUpcallInterface
{
private:
	bool useDefaultState; 
	bool useLogging;
	int taskLoggingId;
	unsigned int currentUpdateCount;
	
	
	Smart::StatusCode navVelInStatus;
	CommBasicObjects::CommNavigationVelocity navVelInObject;
	Smart::StatusCode localizationUpdateStatus;
	CommBasicObjects::CommBasePositionUpdate localizationUpdateObject;
	
protected:
	virtual int execute_protected_region();
	
	virtual void updateAllCommObjects();
	
	virtual int getPreviousCommObjId();
	
	void triggerLogEntry(const int& idOffset);
	
	
	// overload and implement this method in derived classes to immediately get all incoming updates from NavVelIn (as soon as they arrive)
	virtual void on_NavVelIn(const CommBasicObjects::CommNavigationVelocity &input) {
		// no-op
	}
	
	// this method can be safely used from the thread in derived classes
	inline Smart::StatusCode navVelInGetUpdate(CommBasicObjects::CommNavigationVelocity &navVelInObject) const
	{
		// copy local object buffer and return the last status code
		navVelInObject = this->navVelInObject;
		return navVelInStatus;
	}
	// overload and implement this method in derived classes to immediately get all incoming updates from LocalizationUpdate (as soon as they arrive)
	virtual void on_LocalizationUpdate(const CommBasicObjects::CommBasePositionUpdate &input) {
		// no-op
	}
	
	// this method can be safely used from the thread in derived classes
	inline Smart::StatusCode localizationUpdateGetUpdate(CommBasicObjects::CommBasePositionUpdate &localizationUpdateObject) const
	{
		// copy local object buffer and return the last status code
		localizationUpdateObject = this->localizationUpdateObject;
		return localizationUpdateStatus;
	}
	

public:
	RobotTaskCore(Smart::IComponent *comp, const bool &useDefaultState=true)
	:	SmartACE::ManagedTask(comp)
	,	useDefaultState(useDefaultState)
	,	useLogging(false)
	,	taskLoggingId(0)
	,	currentUpdateCount(0)
	,	navVelInStatus(Smart::SMART_DISCONNECTED)
	,	navVelInObject()
	,	localizationUpdateStatus(Smart::SMART_DISCONNECTED)
	,	localizationUpdateObject()
	{  }
	virtual ~RobotTaskCore()
	{  }
	
	inline void setUpLogging(const int &taskNbr, const bool &useLogging=true) {
		this->taskLoggingId = taskNbr;
		this->useLogging = useLogging;
	}
	
	inline bool isLoggingActive() const {
		return useLogging;
	}
	
	inline int getLoggingID() const {
		return taskLoggingId;
	}
	
	inline int getCurrentUpdateCount() const {
		return currentUpdateCount;
	}
};
#endif
