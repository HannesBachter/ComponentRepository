//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "WatchDogTask.hh"
#include "ComponentLaserHokuyoURGServer.hh"

#include <iostream>

bool WatchDogTask::_running = false;
unsigned int WatchDogTask::_count = 0;
unsigned int WatchDogTask::_lastCount = 0;

void WatchDogTask::watchDogStart()
{
	watchDogReset();

	_running = true;
}

void WatchDogTask::watchDogReset()
{
	_count = 20;
	_lastCount = 0;
}

WatchDogTask::WatchDogTask(SmartACE::SmartComponent *comp) 
:	WatchDogTaskCore(comp)
{
	std::cout << "constructor WatchDogTask\n";
}
WatchDogTask::~WatchDogTask() 
{
	std::cout << "destructor WatchDogTask\n";
}



int WatchDogTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int WatchDogTask::on_execute()
{
	// this method is called from an outside loop,
		// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
		// also do not use blocking calls which do not result from smartsoft kernel

		// this method is triggered periodically with period time 1000 ms

		if(_running)
		{
			if(_count-_lastCount < 5)
			{
				std::cout << "max:" << _count << "  current:" << _lastCount << std::endl;
			}
			++_lastCount;
			if(_lastCount == _count)
			{
				raise(SIGINT);
			}
		}

		// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
		return 0;
}
int WatchDogTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
