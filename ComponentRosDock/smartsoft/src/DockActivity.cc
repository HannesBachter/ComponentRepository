//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "DockActivity.hh"
#include "ComponentRosDock.hh"

#include <iostream>

DockActivity::DockActivity(SmartACE::SmartComponent *comp) 
:	DockActivityCore(comp)
{
	std::cout << "constructor DockActivity\n";
}
DockActivity::~DockActivity() 
{
	std::cout << "destructor DockActivity\n";
}

void DockActivity::twist_sub_cb(const geometry_msgs::Twist::ConstPtr &msg)
{
	std::unique_lock<std::mutex> lck (mtx);

    CommBasicObjects::CommNavigationVelocity comNavVel;

    comNavVel.set_vX(msg->linear.x);
    comNavVel.set_vY(msg->linear.y);
	comNavVel.set_omega(msg->angular.z);
	std::cout << "Velocity x: " << msg->linear.x	<< std::endl;
	std::cout << "velocity y: " << msg->linear.y	<< std::endl;
	std::cout << "turnrate :" << msg->angular.z	<< std::endl;

    Smart::StatusCode status_nav;

    status_nav = this->navigationVelocityServiceOutPut(comNavVel);
    if(status_nav != Smart::SMART_OK)
	{
		std::cerr << status_nav << std::endl;
		std::cout << "Some Error in the Conection as status is not ok " << std::endl;
	}
	else
	{
		std::cout << "Updating Velocity " << comNavVel << std::endl;
	}
}

void DockActivity::on_BaseStateServiceIn(const CommBasicObjects::CommBaseState &input)
{
	// upcall triggered from InputPort BaseStateServiceIn
	// - use a local mutex here, because this upcal is called asynchroneously from outside of this task
	// - do not use longer blocking calls here since this upcall blocks the InputPort BaseStateServiceIn
	// - if you need to implement a long-running procedure, do so within the on_execute() method and in
	//   there, use the method baseStateServiceInGetUpdate(input) to get a copy of the input object
}
void DockActivity::on_LaserServiceIn(const CommBasicObjects::CommMobileLaserScan &input)
{
	// upcall triggered from InputPort LaserServiceIn
	// - use a local mutex here, because this upcal is called asynchroneously from outside of this task
	// - do not use longer blocking calls here since this upcall blocks the InputPort LaserServiceIn
	// - if you need to implement a long-running procedure, do so within the on_execute() method and in
	//   there, use the method laserServiceInGetUpdate(input) to get a copy of the input object
}

int DockActivity::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int DockActivity::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	CommBasicObjects::CommBaseState baseStateServiceInObject;
	status = this->baseStateServiceInGetUpdate(baseStateServiceInObject);
	if(status != Smart::SMART_OK) {
		std::cerr << status << std::endl;
		// return 0;
	} else {
		std::cout << "received: " << baseStateServiceInObject << std::endl;
	}
	CommBasicObjects::CommMobileLaserScan laserServiceInObject;
	status = this->laserServiceInGetUpdate(laserServiceInObject);
	if(status != Smart::SMART_OK) {
		std::cerr << status << std::endl;
		// return 0;
	} else {
		std::cout << "received: " << laserServiceInObject << std::endl;
	}


//	geometry_msgs::Twist twist_msg;
//	twist_msg.linear.x = 1.0;
//
//	std::cout << "publishing twist " << std::endl;
//	COMP -> rosPorts -> twist_pub.publish(twist_msg);
	//twist_pub.publish(twist);


	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int DockActivity::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
