//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _SMARTLASERLMS200SERVER_HH
#define _SMARTLASERLMS200SERVER_HH
	
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "SmartLaserLMS200ServerCore.hh"
#include "SmartLaserLMS200ServerImpl.hh"

// include communication objects
#include <CommBasicObjects/CommBaseState.hh>
#include <CommBasicObjects/CommBaseStateACE.hh>
#include <CommBasicObjects/CommMobileLaserScan.hh>
#include <CommBasicObjects/CommMobileLaserScanACE.hh>
#include <CommBasicObjects/CommVoid.hh>
#include <CommBasicObjects/CommVoidACE.hh>

// include tasks
#include "LaserTask.hh"
// include UpcallManagers
#include "BaseStateInUpcallManager.hh"

// include input-handler
// include input-handler
#include "LaserQueryServiceAnswHandler.hh"

// include handler
#include "CompHandler.hh"

#include "ParameterStateStruct.hh"
#include "ParameterUpdateHandler.hh"

#include "SmartStateChangeHandler.hh"

#define COMP SmartLaserLMS200Server::instance()

class SmartLaserLMS200Server : public SmartLaserLMS200ServerCore {
private:
	static SmartLaserLMS200Server _smartLaserLMS200Server;
	
	// constructor
	SmartLaserLMS200Server();
	
	// copy-constructor
	SmartLaserLMS200Server(const SmartLaserLMS200Server& cc);
	
	// destructor
	~SmartLaserLMS200Server() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
public:
	// component
	SmartLaserLMS200ServerImpl *component;
	
	ParameterStateStruct getGlobalState() const
	{
		return paramHandler.getGlobalState();
	}
	
	// define tasks
	Smart::TaskTriggerSubject* laserTaskTrigger;
	LaserTask *laserTask;
	
	// define input-ports
	// InputPort BaseStateIn
	Smart::IPushClientPattern<CommBasicObjects::CommBaseState> *baseStateIn;
	Smart::InputTaskTrigger<CommBasicObjects::CommBaseState> *baseStateInInputTaskTrigger;
	BaseStateInUpcallManager *baseStateInUpcallManager;
	
	// define request-ports
	
	// define input-handler
	
	// define output-ports
	Smart::IPushServerPattern<CommBasicObjects::CommMobileLaserScan> *laserScanOut;
	
	// define answer-ports
	Smart::IQueryServerPattern<CommBasicObjects::CommVoid, CommBasicObjects::CommMobileLaserScan,SmartACE::QueryId> *laserQueryServiceAnsw;
	Smart::QueryServerTaskTrigger<CommBasicObjects::CommVoid, CommBasicObjects::CommMobileLaserScan,SmartACE::QueryId> *laserQueryServiceAnswInputTaskTrigger;
	
	// define request-handlers
	LaserQueryServiceAnswHandler *laserQueryServiceAnswHandler;
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	ParamUpdateHandler paramHandler;
	SmartACE::ParameterSlave *param;
	
	
	void init(int argc, char *argv[]);
	void run();
	
	void setStartupFinished();
	Smart::StatusCode connectAndStartAllServices();
	void startAllTasks();
	void startAllTimers();
	
	Smart::StatusCode connectBaseStateIn(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static SmartLaserLMS200Server* instance()
	{
		return (SmartLaserLMS200Server*)&_smartLaserLMS200Server;
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialMainState;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct LaserTask_struct {
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} laserTask;
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
		struct LaserQueryServiceAnsw_struct {
				std::string serviceName;
		} laserQueryServiceAnsw;
		struct LaserScanOut_struct {
				std::string serviceName;
		} laserScanOut;
	
		//--- client port parameter ---
		struct BaseStateIn_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
		} baseStateIn;
	} connections;
};
#endif
