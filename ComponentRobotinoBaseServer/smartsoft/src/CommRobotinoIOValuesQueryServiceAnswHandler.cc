//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2014 Matthias Lutz
//
//        lutz@hs-ulm.de
//
//        Servicerobotics Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "CommRobotinoIOValuesQueryServiceAnswHandler.hh"

#include "ComponentRobotinoBaseServer.hh"

CommRobotinoIOValuesQueryServiceAnswHandler::CommRobotinoIOValuesQueryServiceAnswHandler(Smart::IQueryServerPattern<CommRobotinoObjects::CommRobotinoIOValues, CommRobotinoObjects::CommRobotinoIOValues, SmartACE::QueryId>* server)
:	CommRobotinoIOValuesQueryServiceAnswHandlerCore(server)
{
	
}

CommRobotinoIOValuesQueryServiceAnswHandler::~CommRobotinoIOValuesQueryServiceAnswHandler()
{
	
}


void CommRobotinoIOValuesQueryServiceAnswHandler::handleQuery(const SmartACE::QueryId &id, const CommRobotinoObjects::CommRobotinoIOValues& request) 
{
	CommRobotinoObjects::CommRobotinoIOValues answer;
	
	// implement your query handling logic here and fill in the answer object
	


	if(request.getDigitalOutputValuesSize()>0){
		for(unsigned int i=0;i<request.getDigitalOutputValuesSize();i++){
			CommRobotinoObjectsIDL::DigitalOutputRequest value = request.getDigitalOutputValuesElemAtPos(i);
			std::cout<<__FUNCTION__<<": Digital Output number: "<<value.outputNumber<<" value: "<<value.outputValue<<std::endl;
			COMP->robot->setDigitalOutput(value.outputNumber, (bool)value.outputValue);
		}

	}

	if(request.getAnalogOutputValuesSize()>0){
		for(unsigned int i=0;i<request.getAnalogOutputValuesSize();i++){
					CommRobotinoObjectsIDL::AnalogOutputRequest value = request.getAnalogOutputValuesElemAtPos(i);
					COMP->robot->setAnalogOutput(value.outputNumber, value.outputValue);
				}
	}


	//CommRobotinoObjects::CommRobotinoIOValues answer;

	std::vector<bool> digitalIn = COMP->robot->getDigitalInputArray();
	std::vector<float> analogIn = COMP->robot->getAnalogInputArray();

	answer.resizeDigitalInputValues(digitalIn.size());
	for(unsigned int i=0;i<digitalIn.size();i++){
		answer.setDigitalInputValuesElemAtPos(i,digitalIn[i]);
	}

	for(unsigned int i=0;i<analogIn.size();i++){
		answer.getAnalogInputValuesRef().push_back(analogIn[i]);
	}

	//answer.set(result);
	//server.answer(id, answer);



	this->server->answer(id, answer);
}
