//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C)  2018 Matthias Lutz
//
//              lutz@hs-ulm.de
//              schlegel@hs-ulm.de
//
//      ZAFH Servicerobotic Ulm
//      Christian Schlegel
//      University of Applied Sciences
//      Prittwitzstr. 10
//      89075 Ulm
//      Germany
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//-------------------------------------------------------------------------
#ifndef _LASERTASKTIMER_USER_HH
#define _LASERTASKTIMER_USER_HH
	
#include "aceSmartSoft.hh"

class LaserTaskTimerUser : public SmartACE::TimerHandler
{
private:
	long timerId;

	// create mutex
	SmartACE::SmartMutex mutex;
	// create condition mutex
	SmartACE::SmartConditionMutex cond;

protected:
//	virtual void timerExpired(const ACE_Time_Value & absolute_time,
//			const void * arg);

	virtual void timerExpired(const std::chrono::system_clock::time_point &abs_time, const void * arg) override;


public:
	LaserTaskTimerUser()
	: timerId(0)
	, mutex()
	, cond(mutex)
	{  }


	virtual void timerExpired(const std::chrono::system_clock::time_point &abs_time) {
		// overload this method in derived classes
	}

	virtual void waitTimer();

	virtual void start();
	virtual void stop();
};
#endif
